/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projecteuler;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 *
 * @author retif
 */
public class Exercises {
    
    public static void E01() {
        
        //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

        //Find the sum of all the multiples of 3 or 5 below 1000.
        
        int soma_total = 0;
        
        for (int c = 0; c < 500;c++) {
            
            if ((3 * c) > 1000 ) {
                
                break;
            }
            
            soma_total += (3*c);
            
        }
        
        OUTER_LOOP: for (int c = 0; c < 500;c++) {
            
            if ((5 * c) >= 1000 ) {
                
                break;
            }
            
            for (int b = 5; b <= 330; b += 5) {
                
                if ((5*c) == (3*b)) {
                    
                    continue OUTER_LOOP;
                    
                }
                
            }
            
            soma_total += (5*c);
        
        } //OUTER LOOP SOMA
        
            System.out.println("Exercício 1 Total = " + soma_total);
        
    } //E01
    
    public static void E02() {
        
        //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        
        int anterior_maior;
        int menor = 0;
        int maior = 1;
        int total = 0;
        int posicao = 1;
        
        
        
          
        while ( (maior + menor) <= 4000000 ){
            
            
            
            anterior_maior = maior;
            
            maior = menor + maior;
            
            menor = anterior_maior;
            
            if ( (maior % 2) == 0) {
                
            total += maior;
                
            }
            
            System.out.println(posicao + "° Fibonnacci: " + maior);
            System.out.println("");
            System.out.println(">>> " + posicao + "° Soma Total: " + total);
            System.out.println("");
            
            posicao++;
            
        }
        
        
    } //E02
    
    public static void E03() {
        
        //The prime factors of 13195 are 5, 7, 13 and 29.
        //What is the largest prime factor of the number 600851475143 ?
        
        ArrayList <Integer> primos = new ArrayList();
        
        
        //primeiros primos base
        primos.add(2);
        primos.add(3);
        primos.add(5);
        primos.add(7);
        primos.add(11);
        //primos.add(13);
        
        long numero = 600851475143l;
        
        Range: for (int i = 12; i < 100000000; i++) { // range dos numeros que queremos sabem se sao primos
           
           String testepar = Integer.toString(i);
           int teste = Integer.parseInt(Character.toString(testepar.charAt(testepar.length()-1)));
                      
           //Teste Multiplo de 2 - numeros multiplos de 2 nao sao primos - nesse caso testamos o ultimo charAt se for 0,2,4,6,8 da continue pois numeros com esses finais sao multiplos de 2
           if ( teste == 0 || teste == 2 || teste == 4 || teste == 6 || teste == 8 ) {
                
                continue;
                
            } 
            
            //Teste Divisivel pelos Primos da ArrayList
            
            long i_double = i;
            long math;
                     
            for (int c= 0; c < primos.size(); c++) {
                
                //System.out.println(primos.get(c));
                
                if (i % primos.get(c) == 0) { // se o numero (i) for divisivel por algum primo da arraylist , cancela e da continue
                    
                    
                    continue Range;

                }
                
                if (i < Math.pow(primos.get(c), 2) ) { // se o numero (i) for menor que o primo ao quadrado na arraylist entao ele eh considerado primo
                    
                    //System.out.println(i);
                    primos.add(i);
                    
                    math = (long) Math.pow(i, 2); // se i ao quadrado por maior que o numero saberemos que é o numero anterior
                    //System.out.println(math);
                                                            
                    if ( numero < math ) {
                        
                        System.out.println("Primo ao quadrado maior que o numero = " + i);                        
                        break Range;
                        
                    } else {
                        
                    continue Range;
                        
                        
                    }
                    
                }
                
            } // Teste Divisivel por primo
           
        
            
        } // Final Laço Range
        
        // Agora temos todos os primos anteriores ao numero
        
        System.out.println("---------------------");
        
        
        // Agora pegamos a ArrayList contendos todos os numeros primos que ao quadrado dao menos que o numero e dividimos o numero por esses primos
        for (int show = 0 ; show < primos.size() ; show++) {
            
            // Aqui o que der divisao zero é numero primo do numero , sendo assim o ultimo numero sera nossa resposta
            if ( numero % primos.get(show) == 0) {
                
                System.out.println(primos.get(show));
                
            } else {
                
            }
            
            
            
            
            
        } // Final Mostrar ArraList
    
    } // Final E03
    
    public static void E04() {
        
        //Largest palindrome product
        
        //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

        //Find the largest palindrome made from the product of two 3-digit numbers.
        
        // 3-digit number Max 999*999 = 998001
        
        int numero;
        
        String testeNumero;
        String testeNumero2;
        
        ArrayList<Integer> palindromos = new ArrayList<>();
        
        
        
        for (int n1 = 100; n1 < 1000; n1++) { // contador do primeiro numero
            
            for (int n2 = 100; n2 < 1000; n2++) { // contador do segundo numero
                
                numero = n1*n2; // atribui a multiplicação do numero 
                testeNumero = Integer.toString(numero); // atribui o numero para String para comparar os CharAt
                testeNumero2 = "";
                
                for (int inverter = (testeNumero.length() - 1) ; inverter >= 0; inverter-- ) { // atribui o numero invertido ao testeNumero2
                    
                    testeNumero2 += testeNumero.charAt(inverter);
                    
                    
                if (testeNumero.equals(testeNumero2)) {
                
                    palindromos.add(numero); // adiciona o numero na arraylist
                    
                }
                    
                    
                }
                
                Collections.sort(palindromos);
                
                
                
                
                
                
                
                //if ( (testeNumero.charAt(0) == testeNumero.charAt(testeNumero.length()-1)) && (testeNumero.charAt(1) == testeNumero.charAt(testeNumero.length()-2)) && (testeNumero.charAt(2) == testeNumero.charAt(testeNumero.length()-3)) ) { // verifica se o primeiro e  o segundo caracter é igual ao ultimo
               
                //    System.out.println(n1 + " * " + n2 + " = " + testeNumero);
                
                             
                //}
                
                
            }
            
            
            
            
        }
        
                System.out.println(palindromos.get(palindromos.size() - 1));
        
      // Minha primeira resposta foi errado pois eu estava somente dando system out nos palindromos n1 * n2 ai no final aparecia um palindromo da ultima casa , porem em uma multiplicação anterior tinha um palindromo maior!
      // Por isso fiz um arraylist adicionando todos os palindromos e posteriormente organizando-os sort() para arrumar em ordem crescente
    } // Final E04
    
    public static void E05() {
        
        //Smallest multiple
        //Problem 5
        //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        
        // Vou começar com o numero 20000 pois é 20x100
        // 1 tentativa usar um for de 1 a 20 para testar a divisibilidade do numero , caso em 1 dos for de diferente de 0 dar continue
        
        NUMERO_TESTADO: for (long numero = 1; numero <= 9999999999999999l; numero++) {
            
            
            for (int intervalo = 1; intervalo <= 20; intervalo++) {
                
                if (numero % intervalo != 0) { // 
                    
                    continue NUMERO_TESTADO;
                    
                } 
                
                if (intervalo == 20) {
                    
                    
                    for (int intervalo2 = 1; intervalo2 <= 20; intervalo2++) {
                        
                        System.out.println(numero + " / " + intervalo2 + " = " + (numero/intervalo2));
                        
                        
                        
                    }
                    
                    System.out.println("O menor numero divisivel por 1 a 20 sem resto é = " + numero + "!");
                    
                    break NUMERO_TESTADO;
                    
                }
                
            }
            
            
        }
        
        
        
    } // FINAL E05
    
    public static void E06() {
        
    //Sum square difference

    //Problem 6
    //The sum of the squares of the first ten natural numbers is,

    //The square of the sum of the first ten natural numbers is,

    //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .

    //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    
    int somaQuadrado1 = 0;
    long somaQuadrado2 = 0;
    
    for (int somaQuadradoIndividual = 1; somaQuadradoIndividual <= 100; somaQuadradoIndividual++) {
        
        System.out.println(somaQuadradoIndividual + " ao quadrado é " + Math.pow(somaQuadradoIndividual, 2));
        
        somaQuadrado1 += Math.pow(somaQuadradoIndividual, 2);
        
        somaQuadrado2 += somaQuadradoIndividual;
        
        System.out.println("-------------------------------------------------");
        
        
        
        
    }
        
        System.out.println("A soma de 1 a 100 é : " + somaQuadrado2);
        somaQuadrado2 = (long) Math.pow(somaQuadrado2, 2);
        
        System.out.println("-------------------------------------------------");
        
        System.out.println("A soma de 1 a 100 individuais ao quadrado é : " + somaQuadrado1);
        System.out.println("A soma de 1 a 100 quadrado é : " + somaQuadrado2);
        
        System.out.println("-------------------------------------------------");
        
        System.out.println("A diferença entre os dois é : " + (somaQuadrado2 - somaQuadrado1) );
    
        
    } // FINAL E06
    
    
    
    public static void E07() {
        
        
    
        
    //10001st prime
    
    //Problem 7
    
    //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    //What is the 10 001st prime number?

    // Aqui fica mais facil pois ja tinha criado um algoritmo de reconhecimento de numeros primos no exercicio 03; 
    
    
    ArrayList <Long> primos = new ArrayList();
        
        
        //primeiros primos base
        primos.add(2l);
        primos.add(3l);
        primos.add(5l);
        primos.add(7l);
        primos.add(11l);
    
        
        
     Range: for (long i = 12; i < 1000000000000000000l; i++) { // range dos numeros que queremos sabem se sao primos
           
           String testepar = Long.toString(i);
           int teste = Integer.parseInt(Character.toString(testepar.charAt(testepar.length()-1)));
                      
           //Teste Multiplo de 2 - numeros multiplos de 2 nao sao primos - nesse caso testamos o ultimo charAt se for 0,2,4,6,8 da continue pois numeros com esses finais sao multiplos de 2
           if ( teste == 0 || teste == 2 || teste == 4 || teste == 6 || teste == 8 ) {
                
                continue;
                
            } 
            
            //Teste Divisivel pelos Primos da ArrayList
            
            long i_double = i;
            long math;
                     
            for (int c= 0; c < primos.size(); c++) {
                
                //System.out.println(primos.get(c));
                
                if (i % primos.get(c) == 0) { // se o numero (i) for divisivel por algum primo da arraylist , cancela e da continue
                    
                    
                    continue Range;

                }
                
                if (i < Math.pow(primos.get(c), 2) ) { // se o numero (i) for menor que o primo ao quadrado na arraylist entao ele eh considerado primo
                    
                    //System.out.println(i);
                    primos.add(i);
                    
                        if (primos.size() == 10002) { // testa se o tamanho da arraylist com primos é o numero do nosso exercicio
                        
                            break Range;
                            
                        }
                        
                    continue Range;
                        
                        
                    
    
                } // final do teste de caso primo seja menor que ultimo primo ao quadrado
                
                
    
             } // Final do For Primos Size
            
            
     } //Final Range
                
                
                
                    for (int contador = 0; contador <= primos.size() - 2; contador++) { // mostra os primos
                    
                    System.out.println( (contador + 1) + "° Numero Primo: " + primos.get(contador));
                    
                    }
                
        
    } // FINAL E07
    
    public static void E08() {
        
        /*The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450

        Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product? */
        
        BigInteger numero = new BigInteger("7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450");
        
        String tamanho = numero.toString();
        
        ArrayList <Long> listaMultiplicacao = new ArrayList();
        ArrayList <String> listaMultiplicacao2 = new ArrayList();
        
        
        // tamanho do lenght eh 999 por causa do 0 - 999 - 13 = 986;
        
        for (int contador = 0; contador <= 987; contador++) { // Combinações Possiveis de 13 numeros
            
            String combinacoes = "";
            String localChar;
            long multiplicacao = 1;
            
            //int teste = 1; 
            
            for (int i = 0; i <= 12; i++) { // Adiciona os charAt a String
            
            combinacoes += tamanho.charAt(contador + i);
            
            localChar = "";
            
            localChar += tamanho.charAt(contador + i);
            
                    //System.out.println(teste + "° Numero adicionado ao multiplicador!"); 
                    
                
                multiplicacao *= Long.parseLong(localChar);
                    
                
               // teste++;
            
            
            }
            
            
            listaMultiplicacao.add(multiplicacao);
            
            
            
            System.out.println( (contador + 1)  + "° Combinação de 13 Digitos : " + combinacoes + " e sua multiplicação é : " + multiplicacao);
            
            
            
            
        }
        
        
        
         for (int i = 0; i <= listaMultiplicacao.size() - 1; i++) {
            
            listaMultiplicacao2.add( (i+1) + "° = " + listaMultiplicacao.get(i));
            
        }
        
        for (int i = 0; i <= listaMultiplicacao.size() - 1; i++) {
            
            long filtro = 23514624000l;
            
            if (listaMultiplicacao.get(i) == filtro ) {
                
                System.out.println("Posição :" + (i+1));
                
            }
            
            
            
            
        }
        
        Collections.sort(listaMultiplicacao);
        
        
        for (int i = 0; i <= listaMultiplicacao.size() - 1; i++) {
            
            System.out.println( (i + 1) + "° : " + listaMultiplicacao.get(i));
            
            
            
        }
        
        
        
    } // FINAL E08
    
    public static void E09() {
        
        //Special Pythagorean triplet
        
        //Problem 9
        //A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

        //a2 + b2 = c2
        //For example, 32 + 42 = 9 + 16 = 25 = 52.

        //There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        //Find the product abc.
        
        // a2 + b2 = c2 == Aqui esta varrendo ao contrario do C para baixo pois c 
        
        FOR_I : for (int i = 1000; i >= 0; i--) { // FOR DO C
            
            int c = (int) Math.pow(i,2);
            
            FOR_J: for (int j = 1000; j >= 0; j--) { // FOR DO B
                
                int b = (int) Math.pow(j,2);
                
                FOR_K: for (int k = 1000; k >= 0; k--) { // FOR DO A
                    
                    int a = (int) Math.pow(k,2);
                    
                    int d = i+j+k;
                    
                    
                    if ( (a + b) == c) {
                        
                    long e = (long) (k*j) * i;
                    
                        if ( (c > b) && (b > a )) { // 
                            
                            
                            //System.out.println(k + "² + " + j + "² = " + i + "²" ); // RESULTADOS
                            
                            if (d == 1000) {
                                
                                System.out.println("-----------------------------");
                                System.out.println("A soma dos numeros de pitagoras que dão 1000 é:");
                                System.out.println(k + "² + " + j + "² = " + i + "²" ); // RESULTADOS
                                System.out.println("O produto dos 3 numeros são: " + e);
                                System.out.println("-----------------------------");
                                
                                
                            }
                            
                            
                            
                        }
                        
                    }
                    
                    
                       
                        //System.out.println(i + ">" + j + ">" + k );
                        
                        
                    
                    
                    
                } // FINAL K
                
                
            } // FINAL J
            
        } // FINAL I
        
                
    } public static void E10() {
        
        //The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
        //Find the sum of all the primes below two million.
        //Mais um exercicio utilizando numeros primos , neste caso é só criar uma ArrayList até 2 milhoes e soma-la
        
        ArrayList <Integer> primos = new ArrayList();
        
        
        //primeiros primos base
        primos.add(2);
        primos.add(3);
        primos.add(5);
        primos.add(7);
        primos.add(11);
        //primos.add(13);
        
                
        Range: for (int i = 12; i < 2000000; i++) { // range dos numeros que queremos sabem se sao primos
           
           String testepar = Integer.toString(i); // numero to String
           int teste = Integer.parseInt(Character.toString(testepar.charAt(testepar.length()-1))); // Pega o ultimo char do numero e testa se é PAR
                      
           //Teste Multiplo de 2 - numeros multiplos de 2 nao sao primos - nesse caso testamos o ultimo charAt se for 0,2,4,6,8 da continue pois numeros com esses finais sao multiplos de 2
           if ( teste == 0 || teste == 2 || teste == 4 || teste == 6 || teste == 8 ) {
                
                continue;
                
            } 
            
            //Teste Divisivel pelos Primos da ArrayList
            
            long i_double = i;
            
            long math;
                     
            for (int c= 0; c < primos.size(); c++) {
                
                
                if (i % primos.get(c) == 0) { // se o numero (i) for divisivel por algum primo da arraylist , cancela e da continue
                    
                    
                    continue Range;

                }
                
                if (i < Math.pow(primos.get(c), 2) ) { // se o numero (i) for menor que o primo ao quadrado na arraylist entao ele eh considerado primo
                    
                    //System.out.println(i);
                    primos.add(i);
                    System.out.println(i);
                    continue Range;
                    
                }
                
            } // Teste Divisivel por primo
            
            
            
        }
            long total = 0;
            
            for (int soma = 0; soma < primos.size(); soma++) {
                
                total += primos.get(soma);
                
                
            }
            
            System.out.println("A soma de numeros primos antes de 2 milhoes é : " + total);
        
    }//E10
    
    
    public static void E11() {
        
        /*
        Largest product in a grid

        Problem 11
        In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

        08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
        49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
        81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
        52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
        22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
        24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
        32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
        67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
        24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
        21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
        78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
        16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
        86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
        19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
        04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
        88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
        04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
        20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
        20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
        01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

        The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

        What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
        */
        
        //Tirar os espaços da String
                           // 0 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19
                           
        String gridString = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08" + //0
                            "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00" + //1
                            "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65" + //2
                            "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91" + //3
                            "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80" + //4
                            "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50" + //5
                            "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70" + //6
                            "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21" + //7
                            "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72" + //8
                            "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95" + //9
                            "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92" + //10
                            "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57" + //11
                            "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58" + //12
                            "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40" + //13
                            "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66" + //14
                            "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69" + //15
                            "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36" + //16
                            "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16" + //17
                            "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54" + //18
                            "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"; //19
        
        gridString = gridString.replace(" ","");
        
               
        int[][] grid = new int[20][20];
              
        //Auto atribuição da grid no Array Matriz
        
        String localNumber;
        int gridLength = 0;
        
        for (int linha = 0; linha < 20; linha++) {
            
            
            for (int coluna = 0; coluna < 20; coluna++) {
                    
                    localNumber = "" + gridString.charAt(gridLength) + gridString.charAt(gridLength+1);
                    grid[linha][coluna] = Integer.parseInt(localNumber);
                                                            
                    gridLength += 2;
               
            }
            
        }
        
                
        //Varredura do Array da direita pra esquerda e da esquerda para direita
        
        int maxEsquerdaDireita = 0;
        
        String combinacaoMaiorEsquerdaDireta = "";
        
        int n1 = 0;
        int n2 = 0;
        int n3 = 0;
        int n4 = 0;
               
        
        for (int linha = 0; linha < grid.length; linha++) {
            
            for (int coluna = 0; coluna < grid.length; coluna++) {
                
                if (linha != grid.length-1) { // verifica se esta na ultima linha para nao fazer o procedimento de somar os da linha de baixo
                    
                    if ( (coluna == (grid.length-3)) || (coluna == (grid.length-2)) || (coluna == (grid.length-1)) ) { // verifica se esta alem da linha

                        switch (coluna) { // verifica qual posicao esta para pular para linha de baixo                    

                            case 17 :

                                n1 = grid[linha][coluna];
                                n2 = grid[linha][coluna+1];
                                n3 = grid[linha][coluna+2];
                                n4 = grid[linha+1][0];
                                break;

                            case 18 :

                                n1 = grid[linha][coluna];
                                n2 = grid[linha][coluna+1];
                                n3 = grid[linha+1][0];
                                n4 = grid[linha+1][1];
                                break;

                            case 19 :

                                n1 = grid[linha][coluna];
                                n2 = grid[linha+1][0];
                                n3 = grid[linha+1][1];
                                n4 = grid[linha+1][2];
                                break;
                        }
                        
                    } else {

                        n1 = grid[linha][coluna];
                        n2 = grid[linha][coluna+1];
                        n3 = grid[linha][coluna+2];
                        n4 = grid[linha][coluna+3];
                    }
                
                            
                } else if (coluna == grid.length-3) { // se a coluna for igual a 17 da break pois se nao tera +4 par o lado
                    
                    break;
                    
                    
                } else  {
                    
                    n1 = grid[linha][coluna];
                    n2 = grid[linha][coluna+1];
                    n3 = grid[linha][coluna+2];
                    n4 = grid[linha][coluna+3];
                    
                }
                
                // executa a soma do produto
                
                int direitaPraEsquerda,EsquerdaPraDireita,maiorLocalEsquerdaDireita;
                
                direitaPraEsquerda = n1*n2*n3*n4;
                EsquerdaPraDireita = n4*n3*n2*n1;
                
                maiorLocalEsquerdaDireita = direitaPraEsquerda > EsquerdaPraDireita ? direitaPraEsquerda : EsquerdaPraDireita; // operador ternario para comparação local
                
                if (maiorLocalEsquerdaDireita > maxEsquerdaDireita) {
                    
                    maxEsquerdaDireita = maiorLocalEsquerdaDireita;
                    
                    combinacaoMaiorEsquerdaDireta = "Maior Produto esta na Posicão: Linha[" + linha + "] e coluna [" + coluna + "] ";
                    
                    if (direitaPraEsquerda > EsquerdaPraDireita) {
                        
                        combinacaoMaiorEsquerdaDireta += "Direita pra esquerda : " + n1 + "*" + n2 + "*" + n3 + "*" + n4;
                                
                    } else {
                        
                        combinacaoMaiorEsquerdaDireta += "Esquerda pra Direita : " + n1 + "*" + n2 + "*" + n3 + "*" + n4;
                                
                    }
                    
                }
                
                
                
                
                
                
                
            } // for coluna
            
        } // Final da Varredura esquerda pra direita e vice versa // for linha
        
        System.out.println(combinacaoMaiorEsquerdaDireta + " = " + maxEsquerdaDireita);
        
        // Varredura de cima pra baixo e de baixo pra cima
        
        int maxCimaPraBaixo = 0;
        
        String combinacaoMaiorCimaBaixo = "";
        
        for (int linha = 0; linha < grid.length; linha++) {
            
            if(linha == grid.length-3) { // se tiver na posição 17 da break pois nao vai ter a posição no Array
                break;
            }
            
            for (int coluna = 0; coluna < grid.length; coluna++) {
                
                n1 = grid[linha][coluna];
                n2 = grid[linha+1][coluna];
                n3 = grid[linha+2][coluna];
                n4 = grid[linha+3][coluna];
                
                
                
                int cimaPrabaixo,baixoPracima,maiorLocalcimaPraBaixo;

                    cimaPrabaixo = n1*n2*n3*n4;
                    baixoPracima = n4*n3*n2*n1;

                    maiorLocalcimaPraBaixo = cimaPrabaixo > baixoPracima ? cimaPrabaixo : baixoPracima; // operador ternario para comparação local

                    if (maiorLocalcimaPraBaixo > maxCimaPraBaixo) {

                        maxCimaPraBaixo = maiorLocalcimaPraBaixo;

                        combinacaoMaiorCimaBaixo = "Maior Produto esta na Posicão: Linha[" + linha + "] e coluna [" + coluna + "] ";

                        if (cimaPrabaixo > baixoPracima) {

                            combinacaoMaiorCimaBaixo += "Cima para Baixo : " + n1 + "*" + n2 + "*" + n3 + "*" + n4;

                        } else {

                            combinacaoMaiorCimaBaixo += "Baixo para Cima : " + n4 + "*" + n3 + "*" + n2 + "*" + n1;

                        }

                    }
            }
            
            
        } 
        
        System.out.println(combinacaoMaiorCimaBaixo + " = " + maxCimaPraBaixo);
        // final varredura cima para baixo e baixo para cima
        
        //Inicio Varredura de diagonal esquerda para direita
        
        int maxDiagonalEsquerda = 0;
        
        String combinacaoMaiorDiagonalEsquerda = "";
        
        for (int linha = 0; linha < grid.length-3; linha++) {
            
            for (int coluna = 0; coluna < grid.length-3; coluna++) {
                
                if (linha == grid.length-3) {
                    
                    break;
                    
                } else {
                    
                n1 = grid[linha][coluna];
                n2 = grid[linha+1][coluna+1];
                n3 = grid[linha+2][coluna+2];
                n4 = grid[linha+3][coluna+3];
                
                }
                
                int diagonalCimaPrabaixo,diagonalBaixoPracima,maiorLocalDiagonalEsquerdaParaDireita;

                    diagonalCimaPrabaixo = n1*n2*n3*n4;
                    diagonalBaixoPracima = n4*n3*n2*n1;

                    maiorLocalDiagonalEsquerdaParaDireita = diagonalCimaPrabaixo > diagonalBaixoPracima ? diagonalCimaPrabaixo : diagonalBaixoPracima; // operador ternario para comparação local

                    if (maiorLocalDiagonalEsquerdaParaDireita > maxDiagonalEsquerda) {

                        maxDiagonalEsquerda = maiorLocalDiagonalEsquerdaParaDireita;

                        combinacaoMaiorDiagonalEsquerda  = "Maior Produto esta na Posicão: Linha[" + linha + "] e coluna [" + coluna + "] ";

                        if (diagonalCimaPrabaixo > diagonalBaixoPracima) {

                            combinacaoMaiorDiagonalEsquerda  += "Diagonal Esquerda Cima para Baixo : " + n1 + "*" + n2 + "*" + n3 + "*" + n4;

                        } else {

                            combinacaoMaiorDiagonalEsquerda  += "Diagonal Esquerda Baixo para Cima : " + n4 + "*" + n3 + "*" + n2 + "*" + n1;

                        }

                    }
            
                
            } // coluna
            
            
        } // linha
        
        System.out.println(combinacaoMaiorDiagonalEsquerda + " = " + maxDiagonalEsquerda);
        
        // final varredura Diagonal Esquerda
        
        //Inicio Varredura de diagonal Direita para Esquerda
        
        int maxDiagonalDireita = 0;
        
        String combinacaoMaiorDiagonalDireita = "";
        
        for (int linha = 0; linha < grid.length-3; linha++) {
            
            for (int coluna = 3; coluna < grid.length; coluna++) {
                
                if (linha == grid.length-3) {
                    
                    break;
                    
                } else {
                    
                n1 = grid[linha][coluna];
                n2 = grid[linha+1][coluna-1];
                n3 = grid[linha+2][coluna-2];
                n4 = grid[linha+3][coluna-3];
                
                   
                               
                
                
                int diagonalDireitaCimaPrabaixo,diagonalDireitaBaixoPracima,maiorLocalDiagonalDireitaParaEsquerda;

                    diagonalDireitaCimaPrabaixo = n1*n2*n3*n4;
                    diagonalDireitaBaixoPracima = n4*n3*n2*n1;

                    maiorLocalDiagonalDireitaParaEsquerda = diagonalDireitaCimaPrabaixo > diagonalDireitaBaixoPracima ? diagonalDireitaCimaPrabaixo : diagonalDireitaBaixoPracima; // operador ternario para comparação local

                    if (maiorLocalDiagonalDireitaParaEsquerda > maxDiagonalDireita) {

                        maxDiagonalDireita = maiorLocalDiagonalDireitaParaEsquerda;

                        combinacaoMaiorDiagonalDireita  = "Maior Produto esta na Posicão: Linha[" + linha + "] e coluna [" + coluna + "] ";

                        if (diagonalDireitaCimaPrabaixo > diagonalDireitaBaixoPracima) {

                            combinacaoMaiorDiagonalDireita  += "Diagonal Direita Cima para Baixo : " + n1 + "*" + n2 + "*" + n3 + "*" + n4;

                        } else {

                            combinacaoMaiorDiagonalDireita  += "Diagonal Direita Baixo para Cima : " + n4 + "*" + n3 + "*" + n2 + "*" + n1;

                        }

                    }
            
                
            } // coluna
            
            }    
        } // linha
        
        System.out.println(combinacaoMaiorDiagonalDireita + " = " + maxDiagonalDireita);
        
        // final varredura Diagonal Direita
        
        
        
        
    }
    
    public static void E12(){
        
        /*
        Highly divisible triangular number
        Problem 12
        The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?   */
        
        long divisores = 0;
        long maxDivisores = 0;
        int range = 0;
        long localNumber = 0;
        
        do {
            
            range++;
            
            localNumber = Operações.NumeroTriangular(range);
            
            divisores = Operações.NumeroDeDivisores(localNumber);
                        
            
            if (divisores > maxDivisores) {
                
                maxDivisores = divisores;
                System.out.println("O numero " + (Operações.NumeroTriangular(range)) + " tem " + divisores + " divisores!");
                
            }
            
            if (divisores >= 500) {
                
                break;
                
            }
            
            
                    
        } while (divisores <= 500);
        
               
        
        
    }
    
    public static void E13() {
        
        /*
        
        Large sum

        Problem 13
        Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

        37107287533902102798797998220837590246510135740250
        46376937677490009712648124896970078050417018260538
        74324986199524741059474233309513058123726617309629
        91942213363574161572522430563301811072406154908250
        23067588207539346171171980310421047513778063246676
        89261670696623633820136378418383684178734361726757
        28112879812849979408065481931592621691275889832738
        44274228917432520321923589422876796487670272189318
        47451445736001306439091167216856844588711603153276
        70386486105843025439939619828917593665686757934951
        62176457141856560629502157223196586755079324193331
        64906352462741904929101432445813822663347944758178
        92575867718337217661963751590579239728245598838407
        58203565325359399008402633568948830189458628227828
        80181199384826282014278194139940567587151170094390
        35398664372827112653829987240784473053190104293586
        86515506006295864861532075273371959191420517255829
        71693888707715466499115593487603532921714970056938
        54370070576826684624621495650076471787294438377604
        53282654108756828443191190634694037855217779295145
        36123272525000296071075082563815656710885258350721
        45876576172410976447339110607218265236877223636045
        17423706905851860660448207621209813287860733969412
        81142660418086830619328460811191061556940512689692
        51934325451728388641918047049293215058642563049483
        62467221648435076201727918039944693004732956340691
        15732444386908125794514089057706229429197107928209
        55037687525678773091862540744969844508330393682126
        18336384825330154686196124348767681297534375946515
        80386287592878490201521685554828717201219257766954
        78182833757993103614740356856449095527097864797581
        16726320100436897842553539920931837441497806860984
        48403098129077791799088218795327364475675590848030
        87086987551392711854517078544161852424320693150332
        59959406895756536782107074926966537676326235447210
        69793950679652694742597709739166693763042633987085
        41052684708299085211399427365734116182760315001271
        65378607361501080857009149939512557028198746004375
        35829035317434717326932123578154982629742552737307
        94953759765105305946966067683156574377167401875275
        88902802571733229619176668713819931811048770190271
        25267680276078003013678680992525463401061632866526
        36270218540497705585629946580636237993140746255962
        24074486908231174977792365466257246923322810917141
        91430288197103288597806669760892938638285025333403
        34413065578016127815921815005561868836468420090470
        23053081172816430487623791969842487255036638784583
        11487696932154902810424020138335124462181441773470
        63783299490636259666498587618221225225512486764533
        67720186971698544312419572409913959008952310058822
        95548255300263520781532296796249481641953868218774
        76085327132285723110424803456124867697064507995236
        37774242535411291684276865538926205024910326572967
        23701913275725675285653248258265463092207058596522
        29798860272258331913126375147341994889534765745501
        18495701454879288984856827726077713721403798879715
        38298203783031473527721580348144513491373226651381
        34829543829199918180278916522431027392251122869539
        40957953066405232632538044100059654939159879593635
        29746152185502371307642255121183693803580388584903
        41698116222072977186158236678424689157993532961922
        62467957194401269043877107275048102390895523597457
        23189706772547915061505504953922979530901129967519
        86188088225875314529584099251203829009407770775672
        11306739708304724483816533873502340845647058077308
        82959174767140363198008187129011875491310547126581
        97623331044818386269515456334926366572897563400500
        42846280183517070527831839425882145521227251250327
        55121603546981200581762165212827652751691296897789
        32238195734329339946437501907836945765883352399886
        75506164965184775180738168837861091527357929701337
        62177842752192623401942399639168044983993173312731
        32924185707147349566916674687634660915035914677504
        99518671430235219628894890102423325116913619626622
        73267460800591547471830798392868535206946944540724
        76841822524674417161514036427982273348055556214818
        97142617910342598647204516893989422179826088076852
        87783646182799346313767754307809363333018982642090
        10848802521674670883215120185883543223812876952786
        71329612474782464538636993009049310363619763878039
        62184073572399794223406235393808339651327408011116
        66627891981488087797941876876144230030984490851411
        60661826293682836764744779239180335110989069790714
        85786944089552990653640447425576083659976645795096
        66024396409905389607120198219976047599490197230297
        64913982680032973156037120041377903785566085089252
        16730939319872750275468906903707539413042652315011
        94809377245048795150954100921645863754710598436791
        78639167021187492431995700641917969777599028300699
        15368713711936614952811305876380278410754449733078
        40789923115535562561142322423255033685442488917353
        44889911501440648020369068063960672322193204149535
        41503128880339536053299340368006977710650566631954
        81234880673210146739058568557934581403627822703280
        82616570773948327592232845941706525094512325230608
        22918802058777319719839450180888072429661980811197
        77158542502016545090413245809786882778948721859617
        72107838435069186155435662884062257473692284509516
        20849603980134001723930671666823555245252804609722
        53503534226472524250874054075591789781264330331690      */
        
        String numero = "37107287533902102798797998220837590246510135740250" + 
                        "46376937677490009712648124896970078050417018260538" +
                        "74324986199524741059474233309513058123726617309629" +
                        "91942213363574161572522430563301811072406154908250" +
                        "23067588207539346171171980310421047513778063246676" +
                        "89261670696623633820136378418383684178734361726757" +
                        "28112879812849979408065481931592621691275889832738" +
                        "44274228917432520321923589422876796487670272189318" +
                        "47451445736001306439091167216856844588711603153276" +
                        "70386486105843025439939619828917593665686757934951" +
                        "62176457141856560629502157223196586755079324193331" +
                        "64906352462741904929101432445813822663347944758178" +
                        "92575867718337217661963751590579239728245598838407" +
                        "58203565325359399008402633568948830189458628227828" +
                        "80181199384826282014278194139940567587151170094390" +
                        "35398664372827112653829987240784473053190104293586" +
                        "86515506006295864861532075273371959191420517255829" +
                        "71693888707715466499115593487603532921714970056938" +
                        "54370070576826684624621495650076471787294438377604" +
                        "53282654108756828443191190634694037855217779295145" +
                        "36123272525000296071075082563815656710885258350721" +
                        "45876576172410976447339110607218265236877223636045" +
                        "17423706905851860660448207621209813287860733969412" +
                        "81142660418086830619328460811191061556940512689692" +
                        "51934325451728388641918047049293215058642563049483" +
                        "62467221648435076201727918039944693004732956340691" +
                        "15732444386908125794514089057706229429197107928209" +
                        "55037687525678773091862540744969844508330393682126" +
                        "18336384825330154686196124348767681297534375946515" +
                        "80386287592878490201521685554828717201219257766954" +
                        "78182833757993103614740356856449095527097864797581" +
                        "16726320100436897842553539920931837441497806860984" +
                        "48403098129077791799088218795327364475675590848030" +
                        "87086987551392711854517078544161852424320693150332" +
                        "59959406895756536782107074926966537676326235447210" +
                        "69793950679652694742597709739166693763042633987085" +
                        "41052684708299085211399427365734116182760315001271" +
                        "65378607361501080857009149939512557028198746004375" +
                        "35829035317434717326932123578154982629742552737307" +
                        "94953759765105305946966067683156574377167401875275" +
                        "88902802571733229619176668713819931811048770190271" +
                        "25267680276078003013678680992525463401061632866526" +
                        "36270218540497705585629946580636237993140746255962" +
                        "24074486908231174977792365466257246923322810917141" +
                        "91430288197103288597806669760892938638285025333403" +
                        "34413065578016127815921815005561868836468420090470" +
                        "23053081172816430487623791969842487255036638784583" +
                        "11487696932154902810424020138335124462181441773470" +
                        "63783299490636259666498587618221225225512486764533" +
                        "67720186971698544312419572409913959008952310058822" +
                        "95548255300263520781532296796249481641953868218774" +
                        "76085327132285723110424803456124867697064507995236" +
                        "37774242535411291684276865538926205024910326572967" +
                        "23701913275725675285653248258265463092207058596522" +
                        "29798860272258331913126375147341994889534765745501" +
                        "18495701454879288984856827726077713721403798879715" +
                        "38298203783031473527721580348144513491373226651381" +
                        "34829543829199918180278916522431027392251122869539" +
                        "40957953066405232632538044100059654939159879593635" +
                        "29746152185502371307642255121183693803580388584903" +
                        "41698116222072977186158236678424689157993532961922" +
                        "62467957194401269043877107275048102390895523597457" +
                        "23189706772547915061505504953922979530901129967519" +
                        "86188088225875314529584099251203829009407770775672" +
                        "11306739708304724483816533873502340845647058077308" +
                        "82959174767140363198008187129011875491310547126581" +
                        "97623331044818386269515456334926366572897563400500" +
                        "42846280183517070527831839425882145521227251250327" +
                        "55121603546981200581762165212827652751691296897789" +
                        "32238195734329339946437501907836945765883352399886" +
                        "75506164965184775180738168837861091527357929701337" +
                        "62177842752192623401942399639168044983993173312731" +
                        "32924185707147349566916674687634660915035914677504" +
                        "99518671430235219628894890102423325116913619626622" +
                        "73267460800591547471830798392868535206946944540724" +
                        "76841822524674417161514036427982273348055556214818" +
                        "97142617910342598647204516893989422179826088076852" +
                        "87783646182799346313767754307809363333018982642090" +
                        "10848802521674670883215120185883543223812876952786" +
                        "71329612474782464538636993009049310363619763878039" +
                        "62184073572399794223406235393808339651327408011116" +
                        "66627891981488087797941876876144230030984490851411" +
                        "60661826293682836764744779239180335110989069790714" +
                        "85786944089552990653640447425576083659976645795096" +
                        "66024396409905389607120198219976047599490197230297" +
                        "64913982680032973156037120041377903785566085089252" +
                        "16730939319872750275468906903707539413042652315011" +
                        "94809377245048795150954100921645863754710598436791" +
                        "78639167021187492431995700641917969777599028300699" +
                        "15368713711936614952811305876380278410754449733078" +
                        "40789923115535562561142322423255033685442488917353" +
                        "44889911501440648020369068063960672322193204149535" +
                        "41503128880339536053299340368006977710650566631954" +
                        "81234880673210146739058568557934581403627822703280" +
                        "82616570773948327592232845941706525094512325230608" +
                        "22918802058777319719839450180888072429661980811197" +
                        "77158542502016545090413245809786882778948721859617" +
                        "72107838435069186155435662884062257473692284509516" +
                        "20849603980134001723930671666823555245252804609722" +
                        "53503534226472524250874054075591789781264330331690";
                
        BigInteger soma = new BigInteger("0");
        BigInteger localLinha = new BigInteger("0"); // BigInteger local para ser a linha do momento
        String linha = ""; // String que recebera os CharAts dos valores abaixo
        
        for (int i = 0; i < (numero.length()-49); i+= 50) { // aqui vamos pulando de 50 em para começar do inicio de cada linha
            
            linha = "";
            
            
            for (int j = 0; j < 50; j++) { // aqui vamos adicionar de 0 a 49 nas linhas criando um numero temporario
                
                linha += numero.charAt(i+j);
                
            }
            
            localLinha = new BigInteger(linha);
            soma = soma.add(localLinha);
            
            
            
        }
        
        
        System.out.print("Resposta : ");
        for (int i = 0; i < 10; i++) { // mostra os 10 primeiros numeros que sera  resposta conforme o enunciado
            
            System.out.print(soma.toString().charAt(i));           
            
            
        }
       
        System.out.println("");
        System.out.println(soma.toString()); // curiosidade de saber a soma total kkk
        
    }
    
    public static void E14() {
                
                /*
                Longest Collatz sequence
                Problem 14
                The following iterative sequence is defined for the set of positive integers:

                n → n/2 (n is even)
                n → 3n + 1 (n is odd)

                Using the rule above and starting with 13, we generate the following sequence:

                13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
                It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

                Which starting number, under one million, produces the longest chain?

                NOTE: Once the chain starts the terms are allowed to go above one million.*/
        
        long startTime = System.currentTimeMillis();
        
        int numero = 0;
        long cadeia;
        long cadeiaMaxima = 0;

        for (int i = 1; i < 1000000; i++) {

            cadeia = Operações.CadeiaSequeciaDeCollatz(i);
            
            if (cadeia > cadeiaMaxima) {
                
                cadeiaMaxima = cadeia;
                numero = i;
                               
                
            }

        }

        long endTime = System.currentTimeMillis();
 
        long timeElapsed = endTime - startTime;
        
        System.out.println("Resposta: " + numero + " Cadeias: " + cadeiaMaxima);
        
        System.out.println("Execution time in milliseconds: " + (timeElapsed)) ;
        
    }
            
}
